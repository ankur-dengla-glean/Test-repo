name: trigger_workflow_from_comment
on:
  issue_comment:
    types:
      - created

env:
  TRIGGER_COMMAND: "/trigger-workflow"
  # List of workflows allowed to be triggered via PR comment
  ALLOWED_WORKFLOWS: '["pr_check"]'

jobs:
  trigger_workflow:
    permissions:
      actions: write
      checks: write
      contents: write
      pull-requests: read
    # Only run for PR comments. 
    # NOTE: We are NOT using TRIGGER_WORKFLOW env variable here as the env context is not available in if: condition
    if: ${{ github.event.issue.pull_request.draft == false && contains(github.event.comment.body, "/trigger-workflow") }}
    runs-on: ubuntu-latest
    steps:
        ## Get the details of the command and the workflow to trigger from the comment body
      - name: Get Workflow Details
        id: get-workflow-details
        run: |
          input_str="${{ github.event.comment.body }}"

          # Trim leading and trailing spaces, tabs, and newlines
          input_str=$(echo "${input_str}" | tr -d '\n' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

          echo $input_str

          # Get the first segment from the comment body. It should be the TRIGGER_COMMAND
          input_trigger_command=${input_str%% *}

          # Check if the command is correct. If not, bailout
          if [[ $input_trigger_command == $TRIGGER_COMMAND ]]; then
              echo "The command is correct. Moving ahead."
          else
            echo "The command is not valid. Aborting."
            exit 0
          fi

          # Remove the leading TRIGGER_COMMAND and get the workflow to trigger details
          command_params=${input_str#$TRIGGER_COMMAND}
          IFS=' ' read -ra args <<< $command_params     # Convert string to space separated array

          # The first element should be the workflow name. We extract it and push it to GITHUB_OUTPUT so we
          # can use it in the subsequent steps
          workflow_name=${args[0]}
          echo "workflow_name=${workflow_name}" >> $GITHUB_OUTPUT

          # Get the arguments passed to the command and export them in the form key=value to GITHUB_OUTPUT
          # NOTE: Right now these are not used but can be extracted in the subsequent steps and used if needed
          for ((i = 1; i < ${#args[@]}; i++)); do
              arg=${args[i]}
              if [[ $arg == --* ]]; then
                  key=${arg#--}
              else
                  echo "${key}=${arg}" >> $GITHUB_OUTPUT
              fi
          done
        # Check if the workflow is allowed to be triggered via PR comment.
      - name: Check Workflow
        id: check-workflow
        run: |
          # Check if the workflow is allowed to be triggered
          if ${{ contains(fromJson(env.ALLOWED_WORKFLOWS), steps.get-workflow-details.outputs.workflow_name) }}; then
              echo "The workflow is allowed. Moving ahead."
          else
            echo "The workflow is not allowed to be triggered via PR comment. Aborting."
            exit 0
          fi
        # We need the head of the branch from which the PR was raised to run the workflow
      - name: Get PR Details
        id: get-pr-details
        run: |
          PR_HEAD_BRANCH=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}" \
            |jq -r .head.ref)

          echo "pr_head=${PR_HEAD_BRANCH}" >> $GITHUB_OUTPUT
        # We finally trigger the workflow
      - name: Trigger PR Check Workflow
        run: |
          WORKFLOW_TO_TRIGGER="${{steps.get-workflow-details.outputs.workflow_name}}"
          echo "Triggering the ${WORKFLOW_TO_TRIGGER} workflow..."

          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/${WORKFLOW_TO_TRIGGER}.yml/dispatches \
            -d '{"ref":"${{ steps.get-pr-details.outputs.pr_head }}"}'

